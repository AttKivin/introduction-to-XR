{
    "sourceFile": "Assets/Scripts/LensCameraController.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1739223512416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739223814353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,14 @@\n {\r\n     public Transform mainCamera; // Assign the main VR camera\r\n     public Transform magnifyingGlass; // Assign the magnifying glass object\r\n     public Camera lensCamera1; // Assign the first lens camera\r\n-    public Camera lensCamera2; // Assign the second lens camera\r\n \r\n     void Update()\r\n     {\r\n         // Calculate the direction from the magnifying glass to the main camera\r\n         Vector3 directionToMainCamera = (mainCamera.position - magnifyingGlass.position).normalized;\r\n \r\n         // Set lensCamera1 to face in the direction away from the main camera\r\n         lensCamera1.transform.forward = directionToMainCamera;\r\n-\r\n-        // Set lensCamera2 to face in the opposite direction\r\n-        lensCamera2.transform.forward = -directionToMainCamera;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739224109058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,19 @@\n using UnityEngine;\r\n \r\n-public class DualLensCameraController : MonoBehaviour\r\n+public class LensCameraController : MonoBehaviour\r\n {\r\n-    public Transform mainCamera; // Assign the main VR camera\r\n-    public Transform magnifyingGlass; // Assign the magnifying glass object\r\n-    public Camera lensCamera1; // Assign the first lens camera\r\n+    public Camera mainCamera; // Main VR camera\r\n+    public Camera lensCamera; // This camera is attached to the lens part of the magnifying glass\r\n \r\n     void Update()\r\n     {\r\n-        // Calculate the direction from the magnifying glass to the main camera\r\n-        Vector3 directionToMainCamera = (mainCamera.position - magnifyingGlass.position).normalized;\r\n+        // Position the lens camera at the lens object's position\r\n+        lensCamera.transform.position = transform.position;\r\n \r\n-        // Set lensCamera1 to face in the direction away from the main camera\r\n-        lensCamera1.transform.forward = directionToMainCamera;\r\n+        // Rotate the lens camera to match the main camera's rotation\r\n+        lensCamera.transform.rotation = mainCamera.transform.rotation;\r\n+\r\n+        // Optionally adjust the lens camera's field of view if needed dynamically\r\n+        // lensCamera.fieldOfView = mainCamera.fieldOfView * 1.5f; // Example to increase magnification\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739224395874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,12 @@\n     {\r\n         // Position the lens camera at the lens object's position\r\n         lensCamera.transform.position = transform.position;\r\n \r\n-        // Rotate the lens camera to match the main camera's rotation\r\n-        lensCamera.transform.rotation = mainCamera.transform.rotation;\r\n+        // Rotate the lens camera to match the main camera's rotation and then rotate 180 degrees around the y-axis\r\n+        lensCamera.transform.rotation = Quaternion.Euler(mainCamera.transform.eulerAngles.x, mainCamera.transform.eulerAngles.y + 180, mainCamera.transform.eulerAngles.z);\r\n \r\n-        // Optionally adjust the lens camera's field of view if needed dynamically\r\n-        // lensCamera.fieldOfView = mainCamera.fieldOfView * 1.5f; // Example to increase magnification\r\n+        // Alternatively, if the lens needs to exactly mimic the head rotation including pitch and roll:\r\n+        // Vector3 reversedDirection = -mainCamera.transform.forward;\r\n+        // lensCamera.transform.rotation = Quaternion.LookRotation(reversedDirection, mainCamera.transform.up);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739224643470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,20 @@\n using UnityEngine;\r\n \r\n-public class LensCameraController : MonoBehaviour\r\n+public class lensCameraController : MonoBehaviour\r\n {\r\n-    public Camera mainCamera; // Main VR camera\r\n-    public Camera lensCamera; // This camera is attached to the lens part of the magnifying glass\r\n+    public Camera mainCamera; // Assign the main VR camera\r\n+    public Camera lensCamera; // Assign the lens camera\r\n+    public Transform targetPoint; // Assign the central point or target point the lens camera should face away from\r\n \r\n     void Update()\r\n     {\r\n-        // Position the lens camera at the lens object's position\r\n-        lensCamera.transform.position = transform.position;\r\n+        // Position the lens camera at the same position as the main camera\r\n+        lensCamera.transform.position = mainCamera.transform.position;\r\n \r\n-        // Rotate the lens camera to match the main camera's rotation and then rotate 180 degrees around the y-axis\r\n-        lensCamera.transform.rotation = Quaternion.Euler(mainCamera.transform.eulerAngles.x, mainCamera.transform.eulerAngles.y + 180, mainCamera.transform.eulerAngles.z);\r\n+        // Calculate the direction vector from the target point to the main camera\r\n+        Vector3 directionFromTarget = (lensCamera.transform.position - targetPoint.position).normalized;\r\n \r\n-        // Alternatively, if the lens needs to exactly mimic the head rotation including pitch and roll:\r\n-        // Vector3 reversedDirection = -mainCamera.transform.forward;\r\n-        // lensCamera.transform.rotation = Quaternion.LookRotation(reversedDirection, mainCamera.transform.up);\r\n+        // Make the lens camera look in this direction\r\n+        lensCamera.transform.forward = directionFromTarget;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739224662688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,6 @@\n         lensCamera.transform.position = mainCamera.transform.position;\r\n \r\n         // Calculate the direction vector from the target point to the main camera\r\n         Vector3 directionFromTarget = (lensCamera.transform.position - targetPoint.position).normalized;\r\n-\r\n-        // Make the lens camera look in this direction\r\n-        lensCamera.transform.forward = directionFromTarget;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739224682399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n public class lensCameraController : MonoBehaviour\r\n {\r\n     public Camera mainCamera; // Assign the main VR camera\r\n     public Camera lensCamera; // Assign the lens camera\r\n-    public Transform targetPoint; // Assign the central point or target point the lens camera should face away from\r\n \r\n     void Update()\r\n     {\r\n         // Position the lens camera at the same position as the main camera\r\n"
                },
                {
                    "date": 1739224704880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,7 @@\n         // Position the lens camera at the same position as the main camera\r\n         lensCamera.transform.position = mainCamera.transform.position;\r\n \r\n         // Calculate the direction vector from the target point to the main camera\r\n-        Vector3 directionFromTarget = (lensCamera.transform.position - targetPoint.position).normalized;\r\n+        Vector3 directionFromTarget = (lensCamera.transform.position).normalized;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739224864439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n using UnityEngine;\r\n \r\n public class lensCameraController : MonoBehaviour\r\n {\r\n-    public Camera mainCamera; // Assign the main VR camera\r\n-    public Camera lensCamera; // Assign the lens camera\r\n+    public Camera mainCamera;\r\n+    public Camera lensCamera; \r\n \r\n     void Update()\r\n     {\r\n         // Position the lens camera at the same position as the main camera\r\n         lensCamera.transform.position = mainCamera.transform.position;\r\n \r\n         // Calculate the direction vector from the target point to the main camera\r\n-        Vector3 directionFromTarget = (lensCamera.transform.position).normalized;\r\n+        lensCamera.transform.forward = -mainCamera.transform.forward;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739225135839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,18 @@\n using UnityEngine;\r\n \r\n-public class lensCameraController : MonoBehaviour\r\n+public class OppositeDirectionCamera : MonoBehaviour\r\n {\r\n-    public Camera mainCamera;\r\n-    public Camera lensCamera; \r\n+    public Transform mainCamera; // Main VR camera transform\r\n+    public Transform magnifyingGlass; // Transform of the magnifying glass\r\n+    public Camera lensCamera; // Camera that acts as the lens\r\n \r\n     void Update()\r\n     {\r\n-        // Position the lens camera at the same position as the main camera\r\n-        lensCamera.transform.position = mainCamera.transform.position;\r\n-\r\n-        // Calculate the direction vector from the target point to the main camera\r\n-        lensCamera.transform.forward = -mainCamera.transform.forward;\r\n+        // Calculate the vector from the magnifying glass to the main camera\r\n+        Vector3 directionToMainCamera = mainCamera.position - magnifyingGlass.position;\r\n+        \r\n+        // Set the lens camera to look in the opposite direction of the vector to the main camera\r\n+        lensCamera.transform.position = magnifyingGlass.position; // Ensure the lens camera is at the position of the magnifying glass\r\n+        lensCamera.transform.rotation = Quaternion.LookRotation(-directionToMainCamera); // Look in the opposite direction\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739225162603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,18 @@\n using UnityEngine;\r\n \r\n public class OppositeDirectionCamera : MonoBehaviour\r\n {\r\n-    public Transform mainCamera; // Main VR camera transform\r\n-    public Transform magnifyingGlass; // Transform of the magnifying glass\r\n-    public Camera lensCamera; // Camera that acts as the lens\r\n+    public Transform mainCamera;\r\n+    public Transform magnifyingGlass;\r\n+    public Camera lensCamera; \r\n \r\n     void Update()\r\n     {\r\n         // Calculate the vector from the magnifying glass to the main camera\r\n         Vector3 directionToMainCamera = mainCamera.position - magnifyingGlass.position;\r\n         \r\n         // Set the lens camera to look in the opposite direction of the vector to the main camera\r\n-        lensCamera.transform.position = magnifyingGlass.position; // Ensure the lens camera is at the position of the magnifying glass\r\n+        lensCamera.transform.position = magnifyingGlass.position;\r\n         lensCamera.transform.rotation = Quaternion.LookRotation(-directionToMainCamera); // Look in the opposite direction\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739225179122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n using UnityEngine;\r\n \r\n-public class OppositeDirectionCamera : MonoBehaviour\r\n+public class LensCameraController : MonoBehaviour\r\n {\r\n     public Transform mainCamera;\r\n     public Transform magnifyingGlass;\r\n     public Camera lensCamera; \r\n"
                },
                {
                    "date": 1739225421746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,17 @@\n     public Transform mainCamera;\r\n     public Transform magnifyingGlass;\r\n     public Camera lensCamera; \r\n \r\n+    public Camera lensCamera2;\r\n+\r\n     void Update()\r\n     {\r\n         // Calculate the vector from the magnifying glass to the main camera\r\n         Vector3 directionToMainCamera = mainCamera.position - magnifyingGlass.position;\r\n         \r\n         // Set the lens camera to look in the opposite direction of the vector to the main camera\r\n         lensCamera.transform.position = magnifyingGlass.position;\r\n-        lensCamera.transform.rotation = Quaternion.LookRotation(-directionToMainCamera); // Look in the opposite direction\r\n+        lensCamera.transform.rotation = Quaternion.LookRotation(-directionToMainCamera); // Opposite direction\r\n+        lensCamera2.transform.rotation = Quaternion.LookRotation(-directionToMainCamera); // Opposite direction\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739273791748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,21 @@\n using UnityEngine;\r\n \r\n-public class LensCameraController : MonoBehaviour\r\n+public class MagnifierLensController : MonoBehaviour\r\n {\r\n+    public Transform lensCamera1;\r\n+    public Transform lensCamera2;\r\n     public Transform mainCamera;\r\n-    public Transform magnifyingGlass;\r\n-    public Camera lensCamera; \r\n \r\n-    public Camera lensCamera2;\r\n+    private void Update()\r\n+    {\r\n+        UpdateLens(lensCamera1);\r\n+        UpdateLens(lensCamera2);\r\n+    }\r\n \r\n-    void Update()\r\n+    private void UpdateLens(Transform lens)\r\n     {\r\n-        // Calculate the vector from the magnifying glass to the main camera\r\n-        Vector3 directionToMainCamera = mainCamera.position - magnifyingGlass.position;\r\n-        \r\n-        // Set the lens camera to look in the opposite direction of the vector to the main camera\r\n-        lensCamera.transform.position = magnifyingGlass.position;\r\n-        lensCamera.transform.rotation = Quaternion.LookRotation(-directionToMainCamera); // Opposite direction\r\n-        lensCamera2.transform.rotation = Quaternion.LookRotation(-directionToMainCamera); // Opposite direction\r\n+        Vector3 playerPosition = lens.InverseTransformPoint(mainCamera.position);\r\n+        Vector3 mirrorPosition = lens.TransformPoint(new Vector3(-playerPosition.x, -playerPosition.y, -playerPosition.z));\r\n+        lens.LookAt(mirrorPosition, lens.up);\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739273799216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+using UnityEngine;\r\n+\r\n+public class MagnifierLensController : MonoBehaviour\r\n+{\r\n+    public Transform lensCamera1;\r\n+    public Transform lensCamera2;\r\n+    public Transform mainCamera;\r\n+\r\n+    private void Update()\r\n+    {\r\n+        UpdateLens(lensCamera1);\r\n+        UpdateLens(lensCamera2);\r\n+    }\r\n+\r\n+    private void UpdateLens(Transform lens)\r\n+    {\r\n+        Vector3 playerPosition = lens.InverseTransformPoint(mainCamera.position);\r\n+        Vector3 mirrorPosition = lens.TransformPoint(new Vector3(-playerPosition.x, -playerPosition.y, -playerPosition.z));\r\n+        lens.LookAt(mirrorPosition, lens.up);\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739274162092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n using UnityEngine;\r\n \r\n-public class MagnifierLensController : MonoBehaviour\r\n+public class LensCameraController : MonoBehaviour\r\n {\r\n     public Transform lensCamera1;\r\n     public Transform lensCamera2;\r\n     public Transform mainCamera;\r\n@@ -17,26 +17,5 @@\n         Vector3 playerPosition = lens.InverseTransformPoint(mainCamera.position);\r\n         Vector3 mirrorPosition = lens.TransformPoint(new Vector3(-playerPosition.x, -playerPosition.y, -playerPosition.z));\r\n         lens.LookAt(mirrorPosition, lens.up);\r\n     }\r\n-}\n-using UnityEngine;\r\n-\r\n-public class MagnifierLensController : MonoBehaviour\r\n-{\r\n-    public Transform lensCamera1;\r\n-    public Transform lensCamera2;\r\n-    public Transform mainCamera;\r\n-\r\n-    private void Update()\r\n-    {\r\n-        UpdateLens(lensCamera1);\r\n-        UpdateLens(lensCamera2);\r\n-    }\r\n-\r\n-    private void UpdateLens(Transform lens)\r\n-    {\r\n-        Vector3 playerPosition = lens.InverseTransformPoint(mainCamera.position);\r\n-        Vector3 mirrorPosition = lens.TransformPoint(new Vector3(-playerPosition.x, -playerPosition.y, -playerPosition.z));\r\n-        lens.LookAt(mirrorPosition, lens.up);\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739285879567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,19 +3,22 @@\n public class LensCameraController : MonoBehaviour\r\n {\r\n     public Transform lensCamera1;\r\n     public Transform lensCamera2;\r\n-    public Transform mainCamera;\r\n+    public Camera mainViewpoint;\r\n \r\n     private void Update()\r\n     {\r\n-        UpdateLens(lensCamera1);\r\n-        UpdateLens(lensCamera2);\r\n+        AdjustLensOrientation(lensCamera1);\r\n+        AdjustLensOrientation(lensCamera2);\r\n     }\r\n \r\n-    private void UpdateLens(Transform lens)\r\n+    // Adjust the orientation of each lens to face the main camera\r\n+    private void AdjustLensOrientation(Transform lens)\r\n     {\r\n\\ No newline at end of file\n-        Vector3 playerPosition = lens.InverseTransformPoint(mainCamera.position);\r\n-        Vector3 mirrorPosition = lens.TransformPoint(new Vector3(-playerPosition.x, -playerPosition.y, -playerPosition.z));\r\n-        lens.LookAt(mirrorPosition, lens.up);\r\n+        if (mainViewpoint == null || lens == null)\r\n+            return;\r\n+            \r\n+        Vector3 toCameraDirection = mainViewpoint.transform.position - lens.position;\r\n+        lens.rotation = Quaternion.LookRotation(toCameraDirection, lens.up);\r\n     }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1739287381800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,7 @@\n     {\r\n         if (mainViewpoint == null || lens == null)\r\n             return;\r\n             \r\n-        Vector3 toCameraDirection = mainViewpoint.transform.position - lens.position;\r\n         lens.rotation = Quaternion.LookRotation(toCameraDirection, lens.up);\r\n     }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1739287438009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,19 @@\n     public Camera mainViewpoint;\r\n \r\n     private void Update()\r\n     {\r\n-        AdjustLensOrientation(lensCamera1);\r\n-        AdjustLensOrientation(lensCamera2);\r\n+        // Ensure lens cameras match the rotation of the main camera\r\n+        MatchLensOrientation(lensCamera1);\r\n+        MatchLensOrientation(lensCamera2);\r\n     }\r\n \r\n-    // Adjust the orientation of each lens to face the main camera\r\n-    private void AdjustLensOrientation(Transform lens)\r\n+    // Set the orientation of each lens to match the main camera's orientation\r\n+    private void MatchLensOrientation(Transform lens)\r\n     {\r\n         if (mainViewpoint == null || lens == null)\r\n             return;\r\n-            \r\n-        lens.rotation = Quaternion.LookRotation(toCameraDirection, lens.up);\r\n+\r\n+        // Directly set the rotation of the lens to match the main camera's rotation\r\n+        lens.rotation = mainViewpoint.transform.rotation;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739287495935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,19 +7,18 @@\n     public Camera mainViewpoint;\r\n \r\n     private void Update()\r\n     {\r\n-        // Ensure lens cameras match the rotation of the main camera\r\n-        MatchLensOrientation(lensCamera1);\r\n-        MatchLensOrientation(lensCamera2);\r\n+        AdjustLensOrientation(lensCamera1);\r\n+        AdjustLensOrientation(lensCamera2);\r\n     }\r\n \r\n-    // Set the orientation of each lens to match the main camera's orientation\r\n-    private void MatchLensOrientation(Transform lens)\r\n+    // Adjust the orientation of each lens to face the main camera\r\n+    private void AdjustLensOrientation(Transform lens)\r\n     {\r\n         if (mainViewpoint == null || lens == null)\r\n             return;\r\n-\r\n-        // Directly set the rotation of the lens to match the main camera's rotation\r\n-        lens.rotation = mainViewpoint.transform.rotation;\r\n+            \r\n+        Vector3 toCameraDirection = mainViewpoint.transform.position - lens.position;\r\n+        lens.rotation = Quaternion.LookRotation(toCameraDirection, lens.up);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739288013460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n public class LensCameraController : MonoBehaviour\r\n {\r\n     public Transform lensCamera1;\r\n     public Transform lensCamera2;\r\n-    public Camera mainViewpoint;\r\n+    public Camera mainCamera;\r\n \r\n     private void Update()\r\n     {\r\n         AdjustLensOrientation(lensCamera1);\r\n@@ -17,8 +17,8 @@\n     {\r\n         if (mainViewpoint == null || lens == null)\r\n             return;\r\n             \r\n-        Vector3 toCameraDirection = mainViewpoint.transform.position - lens.position;\r\n-        lens.rotation = Quaternion.LookRotation(toCameraDirection, lens.up);\r\n+        Vector3 mainCameraRotation = mainCamera.transform.eulerAngles;\r\n+        lens.transform.eulerAngles = new Vector3(mainCamRotation.x,  mainCamRotation.y, 0);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739288064694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,9 @@\n     }\r\n \r\n     // Adjust the orientation of each lens to face the main camera\r\n     private void AdjustLensOrientation(Transform lens)\r\n-    {\r\n-        if (mainViewpoint == null || lens == null)\r\n-            return;\r\n-            \r\n+    {     \r\n         Vector3 mainCameraRotation = mainCamera.transform.eulerAngles;\r\n-        lens.transform.eulerAngles = new Vector3(mainCamRotation.x,  mainCamRotation.y, 0);\r\n+        lens.transform.eulerAngles = new Vector3(mainCameraRotation.x,  mainCamRotation.y, 0);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739288077157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,7 +15,7 @@\n     // Adjust the orientation of each lens to face the main camera\r\n     private void AdjustLensOrientation(Transform lens)\r\n     {     \r\n         Vector3 mainCameraRotation = mainCamera.transform.eulerAngles;\r\n-        lens.transform.eulerAngles = new Vector3(mainCameraRotation.x,  mainCamRotation.y, 0);\r\n+        lens.transform.eulerAngles = new Vector3(mainCameraRotation.x,  mainCameraRotation.y, 0);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739288598190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n public class LensCameraController : MonoBehaviour\r\n {\r\n     public Transform lensCamera1;\r\n     public Transform lensCamera2;\r\n-    public Camera mainCamera;\r\n+    public Transform mainCamera;\r\n \r\n     private void Update()\r\n     {\r\n         AdjustLensOrientation(lensCamera1);\r\n@@ -14,8 +14,8 @@\n \r\n     // Adjust the orientation of each lens to face the main camera\r\n     private void AdjustLensOrientation(Transform lens)\r\n     {     \r\n-        Vector3 mainCameraRotation = mainCamera.transform.eulerAngles;\r\n-        lens.transform.eulerAngles = new Vector3(mainCameraRotation.x,  mainCameraRotation.y, 0);\r\n+        Vector3 lensDirection = lens.position - mainCamera.position;\r\n+        transform.rotation = Quaternion.LookRotation(lensDirection);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739289238572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,6 +16,7 @@\n     private void AdjustLensOrientation(Transform lens)\r\n     {     \r\n         Vector3 lensDirection = lens.position - mainCamera.position;\r\n         transform.rotation = Quaternion.LookRotation(lensDirection);\r\n+        lens.rotation = mainCamera.rotation;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739289416830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,7 @@\n     private void AdjustLensOrientation(Transform lens)\r\n     {     \r\n         Vector3 lensDirection = lens.position - mainCamera.position;\r\n         transform.rotation = Quaternion.LookRotation(lensDirection);\r\n-        lens.rotation = mainCamera.rotation;\r\n+        lens.rotation = mainCamera.transform.rotation;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739289544072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,6 @@\n     private void AdjustLensOrientation(Transform lens)\r\n     {     \r\n         Vector3 lensDirection = lens.position - mainCamera.position;\r\n         transform.rotation = Quaternion.LookRotation(lensDirection);\r\n-        lens.rotation = mainCamera.transform.rotation;\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739325810626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,11 @@\n         AdjustLensOrientation(lensCamera1);\r\n         AdjustLensOrientation(lensCamera2);\r\n     }\r\n \r\n-    // Adjust the orientation of each lens to face the main camera\r\n+    // Adjust the orientation of each lens\r\n     private void AdjustLensOrientation(Transform lens)\r\n     {     \r\n         Vector3 lensDirection = lens.position - mainCamera.position;\r\n-        transform.rotation = Quaternion.LookRotation(lensDirection);\r\n+        transform.rotation = Quaternion.LookAt(lensDirection);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739325841672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,7 +15,7 @@\n     // Adjust the orientation of each lens\r\n     private void AdjustLensOrientation(Transform lens)\r\n     {     \r\n         Vector3 lensDirection = lens.position - mainCamera.position;\r\n-        transform.rotation = Quaternion.LookAt(lensDirection);\r\n+        transform.rotation = transform.LookAt(lensDirection);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739325902460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,7 +15,7 @@\n     // Adjust the orientation of each lens\r\n     private void AdjustLensOrientation(Transform lens)\r\n     {     \r\n         Vector3 lensDirection = lens.position - mainCamera.position;\r\n-        transform.rotation = transform.LookAt(lensDirection);\r\n+        transform.rotation = Quaternion.LookRotation(lensDirection);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739326057276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+using UnityEngine;\r\n+\r\n+public class LensCameraController : MonoBehaviour\r\n+{\r\n+    public Transform lensCamera1;\r\n+    public Transform lensCamera2;\r\n+    public Transform mainCamera;\r\n+\r\n+    private void Update()\r\n+    {\r\n+        AdjustLensOrientation(lensCamera1);\r\n+        AdjustLensOrientation(lensCamera2);\r\n+    }\r\n+\r\n+    // Adjust the orientation of each lens\r\n+    private void AdjustLensOrientation(Transform lens)\r\n+    {     \r\n+        Vector3 lensDirection = lens.position - mainCamera.position;\r\n+        transform.rotation = Quaternion.LookRotation(lensDirection, transform.parent.up);\r\n+    }\r\n+}\r\n"
                }
            ],
            "date": 1739223512416,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n\r\npublic class DualLensCameraController : MonoBehaviour\r\n{\r\n    public Transform mainCamera; // Assign the main VR camera\r\n    public Transform magnifyingGlass; // Assign the magnifying glass object\r\n    public Camera lensCamera1; // Assign the first lens camera\r\n    public Camera lensCamera2; // Assign the second lens camera\r\n\r\n    void Update()\r\n    {\r\n        // Calculate the direction from the magnifying glass to the main camera\r\n        Vector3 directionToMainCamera = (mainCamera.position - magnifyingGlass.position).normalized;\r\n\r\n        // Set lensCamera1 to face in the direction away from the main camera\r\n        lensCamera1.transform.forward = directionToMainCamera;\r\n\r\n        // Set lensCamera2 to face in the opposite direction\r\n        lensCamera2.transform.forward = -directionToMainCamera;\r\n    }\r\n}\r\n"
        }
    ]
}