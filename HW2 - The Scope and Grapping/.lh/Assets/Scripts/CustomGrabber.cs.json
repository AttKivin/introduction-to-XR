{
    "sourceFile": "Assets/Scripts/CustomGrabber.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1739278697959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739284828884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \r\n     private void TryGrabObject()\r\n     {\r\n         if (!heldObject)\r\n-            heldObject = graspableObjects.Count > 0 ? graspableObjects[0] : siblingHand.heldObject;\r\n+            heldObject = grabbableObjects.Count > 0 ? grabbableObjects[0] : siblingHand.heldObject;\r\n     }\r\n \r\n     private void HandleSharedObjectManipulation()\r\n     {\r\n@@ -131,13 +131,13 @@\n \r\n     private void OnTriggerEnter(Collider other)\r\n     {\r\n         if (other.CompareTag(\"Grabbable\"))\r\n-            graspableObjects.Add(other.transform);\r\n+            grabbableObjects.Add(other.transform);\r\n     }\r\n \r\n     private void OnTriggerExit(Collider other)\r\n     {\r\n         if (other.CompareTag(\"Grabbable\"))\r\n-            graspableObjects.Remove(other.transform);\r\n+            grabbableObjects.Remove(other.transform);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1739285223314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,143 +1,127 @@\n+using System.Collections;\r\n using System.Collections.Generic;\r\n using UnityEngine;\r\n using UnityEngine.InputSystem;\r\n \r\n-public class CustomGrabber : MonoBehaviour\r\n+public class CustomGrab : MonoBehaviour\r\n {\r\n-    CustomGrabber siblingHand = null;\r\n-    public List<Transform> grabbableObjects = new List<Transform>();\r\n-    public Transform heldObject = null;\r\n-    public InputActionReference gripAction;\r\n-    public InputActionReference rotationModeToggle;\r\n+    // This script should be attached to both controller objects in the scene\r\n+    // Make sure to define the input in the editor (LeftHand/Grip and RightHand/Grip recommended respectively)\r\n+    CustomGrab otherHand = null;\r\n+    public List<Transform> nearObjects = new List<Transform>();\r\n+    public Transform grabbedObject = null;\r\n+    public InputActionReference action;\r\n+    public InputActionReference toggleDoubleRotationAction;\r\n \r\n-    private bool isGrabbing = false;\r\n-    private Vector3 lastPosition;\r\n-    private Quaternion lastRotation;\r\n-    private bool isDoubleRotationEnabled = false;\r\n+    private bool grabbing = false;\r\n+    private Vector3 previousPosition;\r\n+    private Quaternion previousRotation;\r\n+    private bool doubleRotation = false;\r\n \r\n-    void Start()\r\n+    private void Start()\r\n     {\r\n-        gripAction.action.Enable();\r\n-        rotationModeToggle.action.Enable();\r\n+        action.action.Enable();\r\n+        toggleDoubleRotationAction.action.Enable();\r\n \r\n-        rotationModeToggle.action.performed += OnToggleRotationMode;\r\n+        toggleDoubleRotationAction.action.performed += ToggleDoubleRotation;\r\n \r\n-        // Locate the other hand\r\n-        foreach (CustomGrabber grabber in transform.parent.GetComponentsInChildren<CustomGrabber>())\r\n+        // Find the other hand\r\n+        foreach (CustomGrab c in transform.parent.GetComponentsInChildren<CustomGrab>())\r\n         {\r\n-            if (grabber != this)\r\n-                siblingHand = grabber;\r\n+            if (c != this)\r\n+                otherHand = c;\r\n         }\r\n \r\n-        lastPosition = transform.position;\r\n-        lastRotation = transform.rotation;\r\n+        previousPosition = transform.position;\r\n+        previousRotation = transform.rotation;\r\n     }\r\n \r\n     void Update()\r\n     {\r\n-        isGrabbing = gripAction.action.IsPressed();\r\n+        grabbing = action.action.IsPressed();\r\n \r\n-        if (isGrabbing)\r\n+        if (grabbing)\r\n         {\r\n-            TryGrabObject();\r\n+            if (!grabbedObject)\r\n+                grabbedObject = nearObjects.Count > 0 ? nearObjects[0] : otherHand.grabbedObject;\r\n \r\n-            if (heldObject)\r\n+            if (grabbedObject)\r\n             {\r\n-                if (siblingHand.isGrabbing && siblingHand.heldObject == heldObject)\r\n+                if (otherHand.grabbing && otherHand.grabbedObject == grabbedObject)\r\n                 {\r\n-                    HandleSharedObjectManipulation();\r\n+                    Vector3 combinedDeltaPosition = (transform.position - previousPosition + otherHand.transform.position - otherHand.previousPosition) / 2;\r\n+                    Quaternion combinedDeltaRotation = Quaternion.Slerp(\r\n+                        transform.rotation * Quaternion.Inverse(previousRotation),\r\n+                        otherHand.transform.rotation * Quaternion.Inverse(otherHand.previousRotation),\r\n+                        0.5f\r\n+                    );\r\n+\r\n+                    if (doubleRotation)\r\n+                        combinedDeltaRotation = DoubleRotationMagnitude(combinedDeltaRotation);\r\n+\r\n+                    ApplyDeltaTransform(grabbedObject, combinedDeltaPosition, combinedDeltaRotation);\r\n                 }\r\n                 else\r\n                 {\r\n-                    HandleIndividualObjectManipulation();\r\n+                    Vector3 deltaPosition = transform.position - previousPosition;\r\n+                    Quaternion deltaRotation = transform.rotation * Quaternion.Inverse(previousRotation);\r\n+\r\n+                    if (doubleRotation)\r\n+                        deltaRotation = DoubleRotationMagnitude(deltaRotation);\r\n+\r\n+                    ApplyDeltaTransform(grabbedObject, deltaPosition, deltaRotation);\r\n                 }\r\n             }\r\n         }\r\n-        else if (heldObject)\r\n+        // If let go of button, release object\r\n+        else if (grabbedObject)\r\n         {\r\n-            ReleaseObject();\r\n+            grabbedObject = null;\r\n         }\r\n-        lastPosition = transform.position;\r\n-        lastRotation = transform.rotation;\r\n+        previousPosition = transform.position;\r\n+        previousRotation = transform.rotation;\r\n     }\r\n \r\n-    private void TryGrabObject()\r\n+    private void ToggleDoubleRotation(InputAction.CallbackContext context)\r\n     {\r\n-        if (!heldObject)\r\n-            heldObject = grabbableObjects.Count > 0 ? grabbableObjects[0] : siblingHand.heldObject;\r\n+        doubleRotation = !doubleRotation;\r\n     }\r\n \r\n-    private void HandleSharedObjectManipulation()\r\n+    private Quaternion DoubleRotationMagnitude(Quaternion rotation)\r\n     {\r\n-        Vector3 positionChange = AveragePositionChange();\r\n-        Quaternion rotationChange = AverageRotationChange();\r\n-\r\n-        if (isDoubleRotationEnabled)\r\n-            rotationChange = EnhanceRotation(rotationChange);\r\n-\r\n-        MoveAndRotate(heldObject, positionChange, rotationChange);\r\n-    }\r\n-\r\n-    private void HandleIndividualObjectManipulation()\r\n-    {\r\n-        Vector3 positionChange = transform.position - lastPosition;\r\n-        Quaternion rotationChange = transform.rotation * Quaternion.Inverse(lastRotation);\r\n-\r\n-        if (isDoubleRotationEnabled)\r\n-            rotationChange = EnhanceRotation(rotationChange);\r\n-\r\n-        MoveAndRotate(heldObject, positionChange, rotationChange);\r\n-    }\r\n-\r\n-    private void ReleaseObject()\r\n-    {\r\n-        heldObject = null;\r\n-    }\r\n-\r\n-    private Vector3 AveragePositionChange()\r\n-    {\r\n-        return (transform.position - lastPosition + siblingHand.transform.position - siblingHand.lastPosition) / 2;\r\n-    }\r\n-\r\n-    private Quaternion AverageRotationChange()\r\n-    {\r\n-        return Quaternion.Slerp(\r\n-            transform.rotation * Quaternion.Inverse(lastRotation),\r\n-            siblingHand.transform.rotation * Quaternion.Inverse(siblingHand.lastRotation),\r\n-            0.5f\r\n-        );\r\n-    }\r\n-\r\n-    private Quaternion EnhanceRotation(Quaternion rotation)\r\n-    {\r\n         rotation.ToAngleAxis(out float angle, out Vector3 axis);\r\n-        angle *= 2; // Double the rotation angle\r\n+        angle *= 2f;\r\n         return Quaternion.AngleAxis(angle, axis);\r\n     }\r\n \r\n-    private void MoveAndRotate(Transform target, Vector3 deltaPosition, Quaternion deltaRotation)\r\n+    private void ApplyDeltaTransform(Transform target, Vector3 deltaPosition, Quaternion deltaRotation)\r\n     {\r\n         target.position += deltaPosition;\r\n         Vector3 offset = target.position - transform.position;\r\n         offset = deltaRotation * offset;\r\n         target.position = transform.position + offset;\r\n-        target.rotation *= deltaRotation;\r\n+        target.rotation = deltaRotation * target.rotation;\r\n     }\r\n \r\n-    private void OnToggleRotationMode(InputAction.CallbackContext context)\r\n-    {\r\n-        isDoubleRotationEnabled = !isDoubleRotationEnabled;\r\n-    }\r\n-\r\n     private void OnTriggerEnter(Collider other)\r\n     {\r\n-        if (other.CompareTag(\"Grabbable\"))\r\n-            grabbableObjects.Add(other.transform);\r\n+        // Make sure to tag grabbable objects with the \"grabbable\" tag\r\n+        // You also need to make sure to have colliders for the grabbable objects and the controllers\r\n+        // Make sure to set the controller colliders as triggers or they will get misplaced\r\n+        // You also need to add Rigidbody to the controllers for these functions to be triggered\r\n+        // Make sure gravity is disabled though, or your controllers will (virtually) fall to the ground\r\n+        \r\n+        Transform t = other.transform;\r\n+        if (t && t.tag.ToLower() == \"grabbable\")\r\n+            nearObjects.Add(t);\r\n     }\r\n \r\n     private void OnTriggerExit(Collider other)\r\n     {\r\n-        if (other.CompareTag(\"Grabbable\"))\r\n-            grabbableObjects.Remove(other.transform);\r\n+        Transform t = other.transform;\r\n+        if (t && t.tag.ToLower() == \"grabbable\")\r\n+            nearObjects.Remove(t);\r\n     }\r\n }\r\n+\r\n+This is my friends code which works can you change structure methods etc to make it different put that it works\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739285263619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,6 +122,4 @@\n         if (t && t.tag.ToLower() == \"grabbable\")\r\n             nearObjects.Remove(t);\r\n     }\r\n }\r\n-\r\n-This is my friends code which works can you change structure methods etc to make it different put that it works\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739285331115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n using System.Collections.Generic;\r\n using UnityEngine;\r\n using UnityEngine.InputSystem;\r\n \r\n-public class CustomGrab : MonoBehaviour\r\n+public class CustomGrabber : MonoBehaviour\r\n {\r\n     // This script should be attached to both controller objects in the scene\r\n     // Make sure to define the input in the editor (LeftHand/Grip and RightHand/Grip recommended respectively)\r\n     CustomGrab otherHand = null;\r\n"
                },
                {
                    "date": 1739285356591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n public class CustomGrabber : MonoBehaviour\r\n {\r\n     // This script should be attached to both controller objects in the scene\r\n     // Make sure to define the input in the editor (LeftHand/Grip and RightHand/Grip recommended respectively)\r\n-    CustomGrab otherHand = null;\r\n+    CustomGrabber otherHand = null;\r\n     public List<Transform> nearObjects = new List<Transform>();\r\n     public Transform grabbedObject = null;\r\n     public InputActionReference action;\r\n     public InputActionReference toggleDoubleRotationAction;\r\n@@ -25,9 +25,9 @@\n \r\n         toggleDoubleRotationAction.action.performed += ToggleDoubleRotation;\r\n \r\n         // Find the other hand\r\n-        foreach (CustomGrab c in transform.parent.GetComponentsInChildren<CustomGrab>())\r\n+        foreach (CustomGrabber c in transform.parent.GetComponentsInChildren<CustomGrab>())\r\n         {\r\n             if (c != this)\r\n                 otherHand = c;\r\n         }\r\n"
                },
                {
                    "date": 1739285385091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n         toggleDoubleRotationAction.action.performed += ToggleDoubleRotation;\r\n \r\n         // Find the other hand\r\n-        foreach (CustomGrabber c in transform.parent.GetComponentsInChildren<CustomGrab>())\r\n+        foreach (CustomGrabber c in transform.parent.GetComponentsInChildren<CustomGrabber>())\r\n         {\r\n             if (c != this)\r\n                 otherHand = c;\r\n         }\r\n"
                }
            ],
            "date": 1739278697959,
            "name": "Commit-0",
            "content": "using System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.InputSystem;\r\n\r\npublic class CustomGrabber : MonoBehaviour\r\n{\r\n    CustomGrabber siblingHand = null;\r\n    public List<Transform> grabbableObjects = new List<Transform>();\r\n    public Transform heldObject = null;\r\n    public InputActionReference gripAction;\r\n    public InputActionReference rotationModeToggle;\r\n\r\n    private bool isGrabbing = false;\r\n    private Vector3 lastPosition;\r\n    private Quaternion lastRotation;\r\n    private bool isDoubleRotationEnabled = false;\r\n\r\n    void Start()\r\n    {\r\n        gripAction.action.Enable();\r\n        rotationModeToggle.action.Enable();\r\n\r\n        rotationModeToggle.action.performed += OnToggleRotationMode;\r\n\r\n        // Locate the other hand\r\n        foreach (CustomGrabber grabber in transform.parent.GetComponentsInChildren<CustomGrabber>())\r\n        {\r\n            if (grabber != this)\r\n                siblingHand = grabber;\r\n        }\r\n\r\n        lastPosition = transform.position;\r\n        lastRotation = transform.rotation;\r\n    }\r\n\r\n    void Update()\r\n    {\r\n        isGrabbing = gripAction.action.IsPressed();\r\n\r\n        if (isGrabbing)\r\n        {\r\n            TryGrabObject();\r\n\r\n            if (heldObject)\r\n            {\r\n                if (siblingHand.isGrabbing && siblingHand.heldObject == heldObject)\r\n                {\r\n                    HandleSharedObjectManipulation();\r\n                }\r\n                else\r\n                {\r\n                    HandleIndividualObjectManipulation();\r\n                }\r\n            }\r\n        }\r\n        else if (heldObject)\r\n        {\r\n            ReleaseObject();\r\n        }\r\n        lastPosition = transform.position;\r\n        lastRotation = transform.rotation;\r\n    }\r\n\r\n    private void TryGrabObject()\r\n    {\r\n        if (!heldObject)\r\n            heldObject = graspableObjects.Count > 0 ? graspableObjects[0] : siblingHand.heldObject;\r\n    }\r\n\r\n    private void HandleSharedObjectManipulation()\r\n    {\r\n        Vector3 positionChange = AveragePositionChange();\r\n        Quaternion rotationChange = AverageRotationChange();\r\n\r\n        if (isDoubleRotationEnabled)\r\n            rotationChange = EnhanceRotation(rotationChange);\r\n\r\n        MoveAndRotate(heldObject, positionChange, rotationChange);\r\n    }\r\n\r\n    private void HandleIndividualObjectManipulation()\r\n    {\r\n        Vector3 positionChange = transform.position - lastPosition;\r\n        Quaternion rotationChange = transform.rotation * Quaternion.Inverse(lastRotation);\r\n\r\n        if (isDoubleRotationEnabled)\r\n            rotationChange = EnhanceRotation(rotationChange);\r\n\r\n        MoveAndRotate(heldObject, positionChange, rotationChange);\r\n    }\r\n\r\n    private void ReleaseObject()\r\n    {\r\n        heldObject = null;\r\n    }\r\n\r\n    private Vector3 AveragePositionChange()\r\n    {\r\n        return (transform.position - lastPosition + siblingHand.transform.position - siblingHand.lastPosition) / 2;\r\n    }\r\n\r\n    private Quaternion AverageRotationChange()\r\n    {\r\n        return Quaternion.Slerp(\r\n            transform.rotation * Quaternion.Inverse(lastRotation),\r\n            siblingHand.transform.rotation * Quaternion.Inverse(siblingHand.lastRotation),\r\n            0.5f\r\n        );\r\n    }\r\n\r\n    private Quaternion EnhanceRotation(Quaternion rotation)\r\n    {\r\n        rotation.ToAngleAxis(out float angle, out Vector3 axis);\r\n        angle *= 2; // Double the rotation angle\r\n        return Quaternion.AngleAxis(angle, axis);\r\n    }\r\n\r\n    private void MoveAndRotate(Transform target, Vector3 deltaPosition, Quaternion deltaRotation)\r\n    {\r\n        target.position += deltaPosition;\r\n        Vector3 offset = target.position - transform.position;\r\n        offset = deltaRotation * offset;\r\n        target.position = transform.position + offset;\r\n        target.rotation *= deltaRotation;\r\n    }\r\n\r\n    private void OnToggleRotationMode(InputAction.CallbackContext context)\r\n    {\r\n        isDoubleRotationEnabled = !isDoubleRotationEnabled;\r\n    }\r\n\r\n    private void OnTriggerEnter(Collider other)\r\n    {\r\n        if (other.CompareTag(\"Grabbable\"))\r\n            graspableObjects.Add(other.transform);\r\n    }\r\n\r\n    private void OnTriggerExit(Collider other)\r\n    {\r\n        if (other.CompareTag(\"Grabbable\"))\r\n            graspableObjects.Remove(other.transform);\r\n    }\r\n}\r\n"
        }
    ]
}