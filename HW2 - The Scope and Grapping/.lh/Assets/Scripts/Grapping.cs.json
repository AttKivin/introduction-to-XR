{
    "sourceFile": "Assets/Scripts/Grapping.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739207576584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739207696029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n using UnityEngine;\r\n using UnityEngine.XR.Interaction.Toolkit;\r\n \r\n-public class CustomGrab : XRGrabInteractable\r\n+public class CustomGrab : MonoBehaviour\r\n {\r\n     private Quaternion initialRotationOffset;\r\n     private Vector3 initialPositionOffset;\r\n     public bool doubleRotation = false;\r\n"
                },
                {
                    "date": 1739207894512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,51 @@\n+using System.Collections;\r\n+using System.Collections.Generic;\r\n using UnityEngine;\r\n-using UnityEngine.XR.Interaction.Toolkit;\r\n+using UnityEngine.InputSystem;\r\n \r\n-public class CustomGrab : MonoBehaviour\r\n+public class Grapping : MonoBehaviour\r\n {\r\n-    private Quaternion initialRotationOffset;\r\n-    private Vector3 initialPositionOffset;\r\n-    public bool doubleRotation = false;\r\n-\r\n-    protected override void OnSelectEntering(SelectEnterEventArgs args)\r\n+    public InputActionReference grb;\r\n+    public InputActionReference doublebtn;\r\n+    public Transform Cube;\r\n+    public Vector3 lastPos;\r\n+    public Quaternion lastRot;\r\n+    // public GameObject attachPoint;\r\n+    \r\n+    // Start is called before the first frame update\r\n+    void Start()\r\n     {\r\n-        base.OnSelectEntering(args);\r\n-        initialRotationOffset = Quaternion.Inverse(args.interactor.attachTransform.rotation) * this.transform.rotation;\r\n-        initialPositionOffset = this.transform.position - args.interactor.attachTransform.position;\r\n+        \r\n     }\r\n \r\n-    protected override void OnSelectExiting(SelectExitEventArgs args)\r\n+    // Update is called once per frame\r\n+    void Update()\r\n     {\r\n-        base.OnSelectExiting(args);\r\n-    }\r\n+        grb.action.Enable();\r\n+        if(Cube){\r\n+            if(grb.action.IsPressed()){\r\n+                Vector3 deltaPos = transform.position - lastPos;\r\n+                // Cube.position += deltaPos;\r\n+                Quaternion deltaRot = transform.rotation*Quaternion.Inverse(lastRot);\r\n+                Cube.rotation = deltaRot*Cube.rotation;\r\n \r\n-    public override void ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase updatePhase)\r\n-    {\r\n-        if (isSelected)\r\n-        {\r\n-            if (updatePhase == XRInteractionUpdateOrder.UpdatePhase.Dynamic)\r\n-            {\r\n-                // This example assumes a single interactor is used.\r\n-                var interactor = firstInteractorSelecting;\r\n-                Quaternion targetRotation = interactor.attachTransform.rotation * initialRotationOffset;\r\n-                Vector3 targetPosition = interactor.attachTransform.position + initialPositionOffset;\r\n-\r\n-                if (doubleRotation)\r\n-                {\r\n-                    Quaternion doubledRotation = Quaternion.Slerp(transform.rotation, targetRotation, 2.0f);\r\n-                    this.transform.rotation = doubledRotation;\r\n+                // Do same for pivot position\r\n+                Vector3 initialVector = Cube.position - transform.position;\r\n+                Vector3 turnedVector = deltaRot*initialVector;\r\n+                Vector3 turnPosition = turnedVector - initialVector;\r\n+                Cube.position += deltaPos + turnPosition;\r\n+                \r\n+                if(doublebtn.action.IsPressed()){\r\n+                    deltaRot *= deltaRot;\r\n                 }\r\n-                else\r\n-                {\r\n-                    this.transform.rotation = targetRotation;\r\n-                }\r\n-                \r\n-                this.transform.position = targetPosition;\r\n             }\r\n         }\r\n-        base.ProcessInteractable(updatePhase);\r\n+        lastPos = transform.position;\r\n+        lastRot = transform.rotation;\r\n     }\r\n-}\r\n+    \r\n+\r\n+    void OnTriggerEnter(Collider other){\r\n+        Cube = other.transform;\r\n+    }  \r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739207576584,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.XR.Interaction.Toolkit;\r\n\r\npublic class CustomGrab : XRGrabInteractable\r\n{\r\n    private Quaternion initialRotationOffset;\r\n    private Vector3 initialPositionOffset;\r\n    public bool doubleRotation = false;\r\n\r\n    protected override void OnSelectEntering(SelectEnterEventArgs args)\r\n    {\r\n        base.OnSelectEntering(args);\r\n        initialRotationOffset = Quaternion.Inverse(args.interactor.attachTransform.rotation) * this.transform.rotation;\r\n        initialPositionOffset = this.transform.position - args.interactor.attachTransform.position;\r\n    }\r\n\r\n    protected override void OnSelectExiting(SelectExitEventArgs args)\r\n    {\r\n        base.OnSelectExiting(args);\r\n    }\r\n\r\n    public override void ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase updatePhase)\r\n    {\r\n        if (isSelected)\r\n        {\r\n            if (updatePhase == XRInteractionUpdateOrder.UpdatePhase.Dynamic)\r\n            {\r\n                // This example assumes a single interactor is used.\r\n                var interactor = firstInteractorSelecting;\r\n                Quaternion targetRotation = interactor.attachTransform.rotation * initialRotationOffset;\r\n                Vector3 targetPosition = interactor.attachTransform.position + initialPositionOffset;\r\n\r\n                if (doubleRotation)\r\n                {\r\n                    Quaternion doubledRotation = Quaternion.Slerp(transform.rotation, targetRotation, 2.0f);\r\n                    this.transform.rotation = doubledRotation;\r\n                }\r\n                else\r\n                {\r\n                    this.transform.rotation = targetRotation;\r\n                }\r\n                \r\n                this.transform.position = targetPosition;\r\n            }\r\n        }\r\n        base.ProcessInteractable(updatePhase);\r\n    }\r\n}\r\n"
        }
    ]
}